/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HTTPProxy_TYPES_H
#define HTTPProxy_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace HTTP_Proxy {

typedef struct _HTTPProxy__isset {
  _HTTPProxy__isset() : document(false), result_code(false) {}
  bool document;
  bool result_code;
} _HTTPProxy__isset;

class HTTPProxy {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  HTTPProxy() : document(), result_code(0) {
  }

  virtual ~HTTPProxy() throw() {}

  std::string document;
  int32_t result_code;

  _HTTPProxy__isset __isset;

  void __set_document(const std::string& val) {
    document = val;
  }

  void __set_result_code(const int32_t val) {
    result_code = val;
  }

  bool operator == (const HTTPProxy & rhs) const
  {
    if (!(document == rhs.document))
      return false;
    if (!(result_code == rhs.result_code))
      return false;
    return true;
  }
  bool operator != (const HTTPProxy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HTTPProxy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HTTPProxy &a, HTTPProxy &b);

} // namespace

#endif
