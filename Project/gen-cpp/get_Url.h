/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef get_Url_H
#define get_Url_H

#include <thrift/TDispatchProcessor.h>
#include "ProxyServer_types.h"

namespace HTTP_Server {

class get_UrlIf {
 public:
  virtual ~get_UrlIf() {}
  virtual void get(std::string& _return, const std::string& url, const int32_t policy) = 0;
};

class get_UrlIfFactory {
 public:
  typedef get_UrlIf Handler;

  virtual ~get_UrlIfFactory() {}

  virtual get_UrlIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(get_UrlIf* /* handler */) = 0;
};

class get_UrlIfSingletonFactory : virtual public get_UrlIfFactory {
 public:
  get_UrlIfSingletonFactory(const boost::shared_ptr<get_UrlIf>& iface) : iface_(iface) {}
  virtual ~get_UrlIfSingletonFactory() {}

  virtual get_UrlIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(get_UrlIf* /* handler */) {}

 protected:
  boost::shared_ptr<get_UrlIf> iface_;
};

class get_UrlNull : virtual public get_UrlIf {
 public:
  virtual ~get_UrlNull() {}
  void get(std::string& /* _return */, const std::string& /* url */, const int32_t /* policy */) {
    return;
  }
};

typedef struct _get_Url_get_args__isset {
  _get_Url_get_args__isset() : url(false), policy(false) {}
  bool url;
  bool policy;
} _get_Url_get_args__isset;

class get_Url_get_args {
 public:

  get_Url_get_args() : url(), policy(0) {
  }

  virtual ~get_Url_get_args() throw() {}

  std::string url;
  int32_t policy;

  _get_Url_get_args__isset __isset;

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_policy(const int32_t val) {
    policy = val;
  }

  bool operator == (const get_Url_get_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(policy == rhs.policy))
      return false;
    return true;
  }
  bool operator != (const get_Url_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const get_Url_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class get_Url_get_pargs {
 public:


  virtual ~get_Url_get_pargs() throw() {}

  const std::string* url;
  const int32_t* policy;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _get_Url_get_result__isset {
  _get_Url_get_result__isset() : success(false) {}
  bool success;
} _get_Url_get_result__isset;

class get_Url_get_result {
 public:

  get_Url_get_result() : success() {
  }

  virtual ~get_Url_get_result() throw() {}

  std::string success;

  _get_Url_get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const get_Url_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const get_Url_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const get_Url_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _get_Url_get_presult__isset {
  _get_Url_get_presult__isset() : success(false) {}
  bool success;
} _get_Url_get_presult__isset;

class get_Url_get_presult {
 public:


  virtual ~get_Url_get_presult() throw() {}

  std::string* success;

  _get_Url_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class get_UrlClient : virtual public get_UrlIf {
 public:
  get_UrlClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  get_UrlClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return, const std::string& url, const int32_t policy);
  void send_get(const std::string& url, const int32_t policy);
  void recv_get(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class get_UrlProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<get_UrlIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (get_UrlProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  get_UrlProcessor(boost::shared_ptr<get_UrlIf> iface) :
    iface_(iface) {
    processMap_["get"] = &get_UrlProcessor::process_get;
  }

  virtual ~get_UrlProcessor() {}
};

class get_UrlProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  get_UrlProcessorFactory(const ::boost::shared_ptr< get_UrlIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< get_UrlIfFactory > handlerFactory_;
};

class get_UrlMultiface : virtual public get_UrlIf {
 public:
  get_UrlMultiface(std::vector<boost::shared_ptr<get_UrlIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~get_UrlMultiface() {}
 protected:
  std::vector<boost::shared_ptr<get_UrlIf> > ifaces_;
  get_UrlMultiface() {}
  void add(boost::shared_ptr<get_UrlIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(std::string& _return, const std::string& url, const int32_t policy) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, url, policy);
    }
    ifaces_[i]->get(_return, url, policy);
    return;
  }

};

} // namespace

#endif
